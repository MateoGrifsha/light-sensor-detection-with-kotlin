package com.example.timerapp

import android.content.Context
import android.hardware.Sensor
import android.hardware.SensorEvent
import android.hardware.SensorEventListener
import android.hardware.SensorManager
import android.os.Bundle
import android.widget.RelativeLayout
import androidx.appcompat.app.AppCompatActivity
import android.graphics.Color
import android.media.MediaPlayer
import android.app.NotificationChannel
import android.app.NotificationManager
import android.os.Build
import android.app.PendingIntent
import android.content.Intent
import androidx.core.app.NotificationCompat

class MainActivity : AppCompatActivity(), SensorEventListener {
    private val CHANNEL_ID = "timer_notification"

    var sensorManager: SensorManager?=null
    var sensor:Sensor?=null
    var layoutElement: RelativeLayout?=null
    private lateinit var mediaPlayer:MediaPlayer
    val sensorIntent = Intent(this, LightSensorService::class.java)


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            startForegroundService(sensorIntent)
        } else {
            startService(sensorIntent)
        }

        val serviceIntent = Intent(this, MyForegroundService::class.java)
        startService(serviceIntent)

        createNotificationChannel()

        layoutElement = findViewById(R.id.layoutTag)

        sensorManager = getSystemService(Context.SENSOR_SERVICE) as SensorManager
        sensor = sensorManager?.getDefaultSensor(Sensor.TYPE_LIGHT)

    }

    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val name = "Timer Notifications"
            val descriptionText = "Channel for timer alerts"
            val importance = NotificationManager.IMPORTANCE_DEFAULT
            val channel = NotificationChannel(CHANNEL_ID, name, importance).apply {
                description = descriptionText
            }
            val notificationManager: NotificationManager =
                getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            notificationManager.createNotificationChannel(channel)
        }
    }
    private fun sendNotification() {
        val intent = Intent(this, MainActivity::class.java)
        val pendingIntent = PendingIntent.getActivity(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT)

        val builder = NotificationCompat.Builder(this, CHANNEL_ID)
            .setSmallIcon(R.drawable.ic_launcher_foreground) // Change this to your app icon
            .setContentTitle("Timer Alert")
            .setContentText("Time is up!")
            .setPriority(NotificationCompat.PRIORITY_DEFAULT)
            .setContentIntent(pendingIntent)
            .setAutoCancel(true) // Dismiss notification when tapped

        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        notificationManager.notify(1, builder.build()) // Unique ID for each notification
    }

    override fun onResume() {
        super.onResume()

        sensorManager?.registerListener(this, sensor, SensorManager.SENSOR_DELAY_NORMAL)
    }

    override fun onPause() {
        super.onPause()

        sensorManager?.unregisterListener(this)
    }
    override fun onSensorChanged(event: SensorEvent?) {
        if (event!!.values[0]>15){
            layoutElement?.setBackgroundColor(Color.BLACK)
        }else{
            sendNotification()
            layoutElement?.setBackgroundColor(Color.WHITE)

            if(!this::mediaPlayer.isInitialized){
                mediaPlayer = MediaPlayer.create(this.applicationContext, R.raw.chime)
            }

            mediaPlayer.start()
        }

    }


    override fun onDestroy() {
        if(this::mediaPlayer.isInitialized){
            mediaPlayer.stop()
            mediaPlayer.release()
        }
        super.onDestroy()
    }
    override fun onAccuracyChanged(sensor: Sensor?, accuracy: Int) {

    }

}
